[pytest]
# Automatically detect and run async tests
asyncio_mode = auto

# Directory containing tests
testpaths = tests

# File patterns for test discovery
python_files = test_*.py
python_classes = Test*
python_functions = test_*

markers =
    # Test type markers
    unit: Unit tests (fast, isolated, with mocks)
    integration: Integration tests (slower, with real components)

    # Integration test sub-types
    api: API integration tests (full HTTP stack)
    repo: Repository integration tests (requires database)
    client: Client integration tests (HTTP client tests with respx)

    # Speed markers
    slow: Tests that take significant time to run (>1s)
    fast: Tests that run quickly (<100ms)

    # Test categories
    smoke: Smoke tests (critical path, run first)
    regression: Regression tests (prevent old bugs)
    security: Security-related tests

    # Feature markers
    auth: Authentication/authorization tests
    2fa: Two-factor authentication tests
    password: Password-related tests

addopts =
    # Show summary of all test types (passed, failed, skipped, errors, xfailed, xpassed)
    -ra

    # Enforce strict marker usage (fail on unknown markers)
    --strict-markers

    # Enforce strict config (fail on config errors)
    --strict-config

    # Show local variables in tracebacks
    --showlocals

    # Verbose output
    -v

    # Show extra test summary info
    --tb=short

minversion = 8.0

filterwarnings =
    # Turn warnings into errors
    error

    # Ignore deprecation warnings from dependencies
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Console output mode
console_output_style = progress

# Log level for tests
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
